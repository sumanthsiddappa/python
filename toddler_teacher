import speech_recognition as sr
import pyttsx3
import tkinter as tk

# Initialize speech recognition and synthesis engines
recognizer = sr.Recognizer()
engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def recognize_speech():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        print("Recognizing...")
        text = recognizer.recognize_google(audio)
        print("You said:", text)
        return text.lower()
    except sr.UnknownValueError:
        print("Sorry, I didn't understand that.")
        return ""
    except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))
        return ""

def teach_greetings():
    speak("Let's learn some basic greetings.")
    greetings = [
        {"sentence": "hello", "explanation": "Used to greet someone."},
        {"sentence": "hi", "explanation": "Informal way of saying hello."},
        {"sentence": "good morning", "explanation": "Used to greet someone in the morning."},
        {"sentence": "good afternoon", "explanation": "Used to greet someone in the afternoon."},
        {"sentence": "good evening", "explanation": "Used to greet someone in the evening."}
    ]
    for greeting in greetings:
        speak(f"Please say '{greeting['sentence']}'")
        response = recognize_speech()
        if greeting["sentence"] in response:
            speak("Well done!")
            speak(greeting["explanation"])
        else:
            while True:
                speak(f"Oops! That wasn't '{greeting['sentence']}'. Let's try again.")
                speak("Please say the correct word:")
                response = recognize_speech()
                if greeting["sentence"] in response:
                    speak("Well done!")
                    speak(greeting["explanation"])
                    break

    speak("Great! Now, let's learn some basic farewells.")
    farewells = [
        {"sentence": "goodbye", "explanation": "Used to say goodbye."},
        {"sentence": "bye", "explanation": "Informal way of saying goodbye."},
        {"sentence": "see you later", "explanation": "Used to say goodbye with the intention of meeting again."},
        {"sentence": "take care", "explanation": "Used to express concern for someone's well-being."}
    ]
    for farewell in farewells:
        speak(f"Please say '{farewell['sentence']}'")
        response = recognize_speech()
        if farewell["sentence"] in response:
            speak("Well done!")
            speak(farewell["explanation"])
        else:
            while True:
                speak(f"Oops! That wasn't '{farewell['sentence']}'. Let's try again.")
                speak("Please say the correct word:")
                response = recognize_speech()
                if farewell["sentence"] in response:
                    speak("Well done!")
                    speak(farewell["explanation"])
                    break

    speak("Excellent! You've learned basic greetings and farewells.")

def teach_apologies():
    speak("Let's learn some basic apologies.")
    apologies = [
        {"sentence": "I am sorry", "explanation": "Used to apologize."},
        {"sentence": "Excuse me", "explanation": "Used to get someone's attention or to apologize."},
    ]
    for apology in apologies:
        speak(f"Please say '{apology['sentence']}'")
        response = recognize_speech()
        if apology["sentence"] in response:
            speak("Well done!")
            speak(apology["explanation"])
        else:
            while True:
                speak(f"Oops! That wasn't '{apology['sentence']}'. Let's try again.")
                speak("Please say the correct phrase:")
                response = recognize_speech()
                if apology["sentence"] in response:
                    speak("Well done!")
                    speak(apology["explanation"])
                    break

def repeat_sentence(sentence, explanation):
    speak(f"Please repeat after me: '{sentence}'")
    response = recognize_speech()
    if sentence.lower() in response:
        speak("Well done!")
        speak(explanation)
    else:
        speak("Oops! It seems like you didn't repeat correctly.")

def main():
    window = tk.Tk()
    window.title("English Learning App")

    # Styling
    window.configure(bg="#f0f0f0")  # Background color
    window.geometry("400x300")  # Window size

    label = tk.Label(window, text="Welcome to English Learning Tutorial", font=("Arial", 16), bg="#f0f0f0")
    label.pack(pady=10)

    button_greetings = tk.Button(window, text="Teach Greetings", command=teach_greetings, bg="#4CAF50", fg="white")
    button_greetings.pack(pady=5)

    button_apologies = tk.Button(window, text="Teach Apologies", command=teach_apologies, bg="#4CAF50", fg="white")
    button_apologies.pack(pady=5)

    button_exit = tk.Button(window, text="Exit", command=lambda: [speak("Goodbye! Have a great day!"), window.quit()], bg="#f44336", fg="white")
    button_exit.pack(pady=5)

    window.mainloop()

if __name__ == "__main__":
    main()
